// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package repository

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const findAllPlayers = `-- name: FindAllPlayers :many
SELECT id, name, level, class, created_at, updated_at, gold FROM player
ORDER BY level DESC
`

func (q *Queries) FindAllPlayers(ctx context.Context) ([]Player, error) {
	rows, err := q.db.Query(ctx, findAllPlayers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Player
	for rows.Next() {
		var i Player
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Level,
			&i.Class,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Gold,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findItemByID = `-- name: FindItemByID :one
SELECT id, name, value FROM item
WHERE id = $1
`

func (q *Queries) FindItemByID(ctx context.Context, id uuid.UUID) (Item, error) {
	row := q.db.QueryRow(ctx, findItemByID, id)
	var i Item
	err := row.Scan(&i.ID, &i.Name, &i.Value)
	return i, err
}

const getInventoryAndPlayer = `-- name: GetInventoryAndPlayer :many
SELECT player.id, player.name, player.level, player.class, player.created_at, player.updated_at, player.gold, item.id, item.name, item.value
FROM inventory
JOIN player ON player.id = player_id
JOIN item ON item.id = item_id
`

type GetInventoryAndPlayerRow struct {
	ID        int32       `json:"id"`
	Name      string      `json:"name"`
	Level     int32       `json:"level"`
	Class     string      `json:"class"`
	CreatedAt time.Time   `json:"created_at"`
	UpdatedAt time.Time   `json:"updated_at"`
	Gold      pgtype.Int8 `json:"gold"`
	ID_2      uuid.UUID   `json:"id_2"`
	Name_2    string      `json:"name_2"`
	Value     int32       `json:"value"`
}

func (q *Queries) GetInventoryAndPlayer(ctx context.Context) ([]GetInventoryAndPlayerRow, error) {
	rows, err := q.db.Query(ctx, getInventoryAndPlayer)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetInventoryAndPlayerRow
	for rows.Next() {
		var i GetInventoryAndPlayerRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Level,
			&i.Class,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Gold,
			&i.ID_2,
			&i.Name_2,
			&i.Value,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getInventoryItem = `-- name: GetInventoryItem :one
SELECT item.id, item.name, item.value
FROM inventory
JOIN item ON item.id = item_id
WHERE player_id = $1
AND item_id = $2
`

type GetInventoryItemParams struct {
	PlayerID int64     `json:"player_id"`
	ItemID   uuid.UUID `json:"item_id"`
}

func (q *Queries) GetInventoryItem(ctx context.Context, arg GetInventoryItemParams) (Item, error) {
	row := q.db.QueryRow(ctx, getInventoryItem, arg.PlayerID, arg.ItemID)
	var i Item
	err := row.Scan(&i.ID, &i.Name, &i.Value)
	return i, err
}

const incrPlayerGold = `-- name: IncrPlayerGold :one
UPDATE player
SET gold = gold + $1::int
WHERE id = $2::bigint
RETURNING id, name, level, class, created_at, updated_at, gold
`

type IncrPlayerGoldParams struct {
	Amount   int32 `json:"amount"`
	PlayerID int64 `json:"player_id"`
}

func (q *Queries) IncrPlayerGold(ctx context.Context, arg IncrPlayerGoldParams) (Player, error) {
	row := q.db.QueryRow(ctx, incrPlayerGold, arg.Amount, arg.PlayerID)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Level,
		&i.Class,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Gold,
	)
	return i, err
}

const insertItem = `-- name: InsertItem :one
INSERT INTO item (id, name, value)
VALUES (uuid_generate_v4(), $1, $2)
RETURNING id, name, value
`

type InsertItemParams struct {
	Name  string `json:"name"`
	Value int32  `json:"value"`
}

func (q *Queries) InsertItem(ctx context.Context, arg InsertItemParams) (Item, error) {
	row := q.db.QueryRow(ctx, insertItem, arg.Name, arg.Value)
	var i Item
	err := row.Scan(&i.ID, &i.Name, &i.Value)
	return i, err
}

const removeInventoryItem = `-- name: RemoveInventoryItem :execrows
DELETE FROM inventory
WHERE player_id = $1
AND item_id = $2
`

type RemoveInventoryItemParams struct {
	PlayerID int64     `json:"player_id"`
	ItemID   uuid.UUID `json:"item_id"`
}

func (q *Queries) RemoveInventoryItem(ctx context.Context, arg RemoveInventoryItemParams) (int64, error) {
	result, err := q.db.Exec(ctx, removeInventoryItem, arg.PlayerID, arg.ItemID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}
