// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: player.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const create = `-- name: Create :one
INSERT INTO player (name, class, level, gold, created_at, updated_at)
VALUES ($1, $2, 1, 0, now(), now())
RETURNING id, name, level, class, created_at, updated_at, gold
`

type CreateParams struct {
	Name  string `json:"name"`
	Class string `json:"class"`
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (Player, error) {
	row := q.db.QueryRow(ctx, create, arg.Name, arg.Class)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Level,
		&i.Class,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Gold,
	)
	return i, err
}

const findPlayerByID = `-- name: FindPlayerByID :one
SELECT id, name, level, class, created_at, updated_at, gold FROM player WHERE id = $1
`

func (q *Queries) FindPlayerByID(ctx context.Context, id int32) (Player, error) {
	row := q.db.QueryRow(ctx, findPlayerByID, id)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Level,
		&i.Class,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Gold,
	)
	return i, err
}

const findPlayerByLevel = `-- name: FindPlayerByLevel :many
SELECT id, name, level, class, created_at, updated_at, gold FROM player WHERE level = $1
`

func (q *Queries) FindPlayerByLevel(ctx context.Context, level int32) ([]Player, error) {
	rows, err := q.db.Query(ctx, findPlayerByLevel, level)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Player
	for rows.Next() {
		var i Player
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Level,
			&i.Class,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Gold,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findPlayerByName = `-- name: FindPlayerByName :one
SELECT id, name, level, class, created_at, updated_at, gold FROM player WHERE name = $1
`

func (q *Queries) FindPlayerByName(ctx context.Context, name string) (Player, error) {
	row := q.db.QueryRow(ctx, findPlayerByName, name)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Level,
		&i.Class,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Gold,
	)
	return i, err
}

const incrGold = `-- name: IncrGold :one
UPDATE player
SET gold = gold + $1::int
WHERE id = $2::bigint
RETURNING gold
`

type IncrGoldParams struct {
	Amount   int32 `json:"amount"`
	PlayerID int64 `json:"player_id"`
}

func (q *Queries) IncrGold(ctx context.Context, arg IncrGoldParams) (pgtype.Int8, error) {
	row := q.db.QueryRow(ctx, incrGold, arg.Amount, arg.PlayerID)
	var gold pgtype.Int8
	err := row.Scan(&gold)
	return gold, err
}

const updateLevel = `-- name: UpdateLevel :exec
UPDATE player SET level = $1 WHERE id = $2
`

type UpdateLevelParams struct {
	Level int32 `json:"level"`
	ID    int32 `json:"id"`
}

func (q *Queries) UpdateLevel(ctx context.Context, arg UpdateLevelParams) error {
	_, err := q.db.Exec(ctx, updateLevel, arg.Level, arg.ID)
	return err
}
