// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: inventory.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const addItem = `-- name: AddItem :exec
INSERT INTO inventory (player_id, item_id)
VALUES ($1, $2)
`

type AddItemParams struct {
	PlayerID int64     `json:"player_id"`
	ItemID   uuid.UUID `json:"item_id"`
}

func (q *Queries) AddItem(ctx context.Context, arg AddItemParams) error {
	_, err := q.db.Exec(ctx, addItem, arg.PlayerID, arg.ItemID)
	return err
}

const itemsForPlayer = `-- name: ItemsForPlayer :many
SELECT item.id, item.name, item.value
FROM inventory
JOIN item ON item.id = item_id
WHERE player_id = $1
`

func (q *Queries) ItemsForPlayer(ctx context.Context, playerID int64) ([]Item, error) {
	rows, err := q.db.Query(ctx, itemsForPlayer, playerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Item
	for rows.Next() {
		var i Item
		if err := rows.Scan(&i.ID, &i.Name, &i.Value); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeItem = `-- name: RemoveItem :exec
DELETE FROM inventory
WHERE player_id = $1
AND item_id = $2
`

type RemoveItemParams struct {
	PlayerID int64     `json:"player_id"`
	ItemID   uuid.UUID `json:"item_id"`
}

func (q *Queries) RemoveItem(ctx context.Context, arg RemoveItemParams) error {
	_, err := q.db.Exec(ctx, removeItem, arg.PlayerID, arg.ItemID)
	return err
}
